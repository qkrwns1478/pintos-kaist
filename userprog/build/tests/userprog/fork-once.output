Kernel command line: -q -f put fork-once run fork-once
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  523,468,800 loops/s.
hd0:0: detected 313 sector (156 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 103 sector (51 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'fork-once' into the file system...
Executing 'fork-once':
(fork-once) begin
fork-once: exit(-1)
[FORK] step 1
Interrupt 0x0d (#GP General Protection Exception) at rip=800421b77b
 cr2=0000000000000000 error=               0
rax 000000800424ced0 rbx 0000000000000000 rcx 0000000000000018 rdx 0000000000000018
rsp 000000800424cec0 rbp 000000800424cfd0 rsi cccccccccccccccc rdi 000000800424ced0
rip 000000800421b77b r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000202
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:97 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x8004217d7d 0x800421cac9 0x8004208d7d 0x800420919b 0x80042073d6.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 251 ticks
Thread: 33 idle ticks, 218 kernel ticks, 0 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 80 reads, 234 writes
hd1:0: 103 reads, 0 writes
Console: 1660 characters output
Key